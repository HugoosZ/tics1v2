/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/AYu5ov1GWmZ
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Button } from "@/components/ui/button"
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
import CustomIco from "./CustomIco";
import Header from "./Header";
import { useEffect, useState } from "react"

export default function PagOpinion() {
  const [data, setData] = useState({}); 
  const [opinions, setOpinions] = useState([]); 

  const handleSubmit = async (e:any) => {
    e.preventDefault();
    const config = {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    };

    try {
      const response = await fetch("http://localhost:2000/opinions", config);
      if (!response.ok) {
        throw new Error("Error sending opinion");
      }
      setData({});
      alert("¡Gracias por tu opinión!");
    } catch (error) {
      console.error("Error:", error);
      alert("Ocurrió un error al enviar tu opinión.");
    }
  };

  useEffect(() => {
    const fetchOpinions = async () => {
      const config = {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      };

      try {
        const response = await fetch("http://localhost:2000/opinions", config);
        const fetchedOpinions = await response.json();
        setOpinions(fetchedOpinions);
      } catch (error) {
        console.error("Error:", error);
      }
    };

    fetchOpinions();
  }, []);
  
  return (
    <>
      <div className="mx-auto max-w-2xl space-y-8 py-12 px-4 sm:px-6 lg:px-8 content-center">
        <div>
          <h2 className="text-2xl font-bold">Deja tu opinión</h2>
          <p className="text-muted-foreground">Comparte tu experiencia con nosotros.</p>
        </div>
        <form className="space-y-4" onSubmit={handleSubmit}>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
            <div>
              <Label htmlFor="name">Nombre</Label>
              <Input id="name" placeholder="Ingresa tu nombre" onChange={(e) => setData({ ...data, name: e.target.value })} />
            </div>
            <div>
              <Label htmlFor="email">Correo electrónico</Label>
              <Input id="email" type="email" placeholder="Ingresa tu correo electrónico" onChange={(e) => setData({ ...data, email: e.target.value })} />
            </div>
          </div>
          <div>
            <Label htmlFor="review">Opinión</Label>
            <Textarea id="review" placeholder="Escribe tu opinión aquí..." className="min-h-[150px]" onChange={(e) => setData({ ...data, review: e.target.value })} />
          </div>
          <Button type="submit" className="w-full">
            Enviar opinión
          </Button>
        </form>
        <div>
          <h2 className="text-2xl font-bold">Opiniones de otros usuarios</h2>
          <div className="space-y-6">
            {opinions.map((opinion) => (
              <div className="flex items-start gap-4" key={opinion.id}>
                <Avatar className="w-10 h-10 border">
                  <AvatarImage src="/placeholder-user.jpg" />
                  <AvatarFallback>{opinion.name[0]}</AvatarFallback>
                </Avatar>
                <div className="space-y-1">
                  <div className="flex items-center gap-2">
                    <div className="font-medium">{opinion.name}</div>
                    <div className="text-xs text-muted-foreground">{opinion.date}</div>
                  </div>
                  <div>{opinion.review}</div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </>
  );

}
